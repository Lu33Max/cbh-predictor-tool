[{"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\index.js":"1","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\App.jsx":"2","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\screens.jsx":"3","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\header\\headerIndex.jsx":"4","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\tablescreen.jsx":"5","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\loginScreen\\loginForm.jsx":"6","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\utilities\\Constants.js":"7","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\table\\table.jsx":"8","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\forms\\createEntryForm.jsx":"9","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\forms\\updateEntryForm.jsx":"10","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\forms\\fileUploadForm.jsx":"11","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\googleGraphs.jsx":"12","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\bingGraphs.jsx":"13","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\leadGraphs.jsx":"14","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\orderGraphs.jsx":"15","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\hooks\\useTable.js":"16","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\table\\footer.jsx":"17","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\table\\popover.jsx":"18","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\pieChart.jsx":"19","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\lineChart.jsx":"20","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\areabumpChart.jsx":"21","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\popover.jsx":"22","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\barChart.jsx":"23","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\bumpChart.jsx":"24","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\popover.jsx":"25"},{"size":287,"mtime":1671298130040,"results":"26","hashOfConfig":"27"},{"size":378,"mtime":1673179238510,"results":"28","hashOfConfig":"27"},{"size":763,"mtime":1671572568693,"results":"29","hashOfConfig":"27"},{"size":419,"mtime":1671812446500,"results":"30","hashOfConfig":"27"},{"size":20888,"mtime":1673183864571,"results":"31","hashOfConfig":"27"},{"size":1681,"mtime":1671468949026,"results":"32","hashOfConfig":"27"},{"size":1712,"mtime":1671361044224,"results":"33","hashOfConfig":"27"},{"size":10627,"mtime":1673179238520,"results":"34","hashOfConfig":"27"},{"size":20176,"mtime":1671572152348,"results":"35","hashOfConfig":"27"},{"size":23789,"mtime":1671645438093,"results":"36","hashOfConfig":"27"},{"size":2983,"mtime":1671571987236,"results":"37","hashOfConfig":"27"},{"size":15241,"mtime":1673179238514,"results":"38","hashOfConfig":"27"},{"size":15240,"mtime":1673179238512,"results":"39","hashOfConfig":"27"},{"size":5916,"mtime":1673179238516,"results":"40","hashOfConfig":"27"},{"size":12204,"mtime":1673179238517,"results":"41","hashOfConfig":"27"},{"size":1011,"mtime":1671148724671,"results":"42","hashOfConfig":"27"},{"size":653,"mtime":1671572183669,"results":"43","hashOfConfig":"27"},{"size":663,"mtime":1671708551418,"results":"44","hashOfConfig":"27"},{"size":691,"mtime":1673179238514,"results":"45","hashOfConfig":"27"},{"size":2145,"mtime":1673179238513,"results":"46","hashOfConfig":"27"},{"size":891,"mtime":1673179238512,"results":"47","hashOfConfig":"27"},{"size":1357,"mtime":1673179238518,"results":"48","hashOfConfig":"27"},{"size":2346,"mtime":1673179238513,"results":"49","hashOfConfig":"27"},{"size":1458,"mtime":1673121824900,"results":"50","hashOfConfig":"27"},{"size":8724,"mtime":1673179238519,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"18rp1y8",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"59"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"59"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"59"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"55"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"59"},"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\index.js",[],[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\App.jsx",[],[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\screens.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\header\\headerIndex.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\tablescreen.jsx",["135","136","137","138","139","140","141","142","143","144","145","146"],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\loginScreen\\loginForm.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\utilities\\Constants.js",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\table\\table.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\forms\\createEntryForm.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\forms\\updateEntryForm.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\forms\\fileUploadForm.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\googleGraphs.jsx",["147","148","149","150","151","152","153","154"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { PieChart } from \"./charts/pieChart\";\r\nimport { LineChart } from \"./charts/lineChart\";\r\nimport { AreaBump } from \"./charts/areabumpChart\";\r\nimport { BarChart } from \"./charts/barChart\";\r\nimport Constants from \"../../../utilities/Constants\";\r\nimport PopoverButton from \"./popover\";\r\nimport styles from \"./graphs.module.css\"\r\nimport axios from \"axios\";\r\n\r\nvar primaryScheme = ['#5fc431','#71d055','#83dc73','#96e890','#abf4ab','#c0ffc6','#a1e5ad','#82cc96','#62b37f','#429a6a','#188255','#429a6a','#62b37f','#82cc96','#a1e5ad','#c0ffc6','#abf4ab','#96e890','#83dc73','#71d055']\r\nvar secondaryScheme = ['#d15454','#e16c7c','#ec86a1','#f4a2c3','#f9bee1','#ffd9fa','#e6b2e3','#cc8bce','#b066bb','#9140a8','#711496']\r\n\r\n//// MAPPING FUNCTIONS ////\r\nfunction GetImpressions(entries, minImpr, showOthers) {\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        setData([])\r\n        var newData = []\r\n        var others = 0;\r\n\r\n        entries.map(function(entry){\r\n            if(newData.find(e => e.name === entry.terms)){\r\n                newData[newData.findIndex(e => e.name === entry.terms)].value += entry.impressions\r\n            } else {\r\n                var newEntry = {\r\n                    id: entry.terms,\r\n                    name: entry.terms, \r\n                    value: entry.impressions\r\n                }\r\n                newData.push(newEntry)\r\n            }\r\n        })\r\n\r\n        for(var i = 0; i < newData.length; i++){\r\n            if(newData[i].value < minImpr){\r\n                others += newData[i].value\r\n                newData.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n    \r\n        if(showOthers){\r\n            var otherEntry = {\r\n                id: \"others\",\r\n                name: \"others\",\r\n                value: others\r\n            }\r\n            newData.push(otherEntry)\r\n        }\r\n        setData(newData)\r\n    }, [entries, minImpr, showOthers])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetClicks(entries, minClicks, showOthers) {\r\n    const [data, setData] = useState([])\r\n    \r\n    useEffect(() => {\r\n        setData([])\r\n        var newData = []\r\n        var others = 0;\r\n\r\n        entries.map(function(entry){\r\n            if(newData.find(e => e.name === entry.terms)){\r\n                newData[newData.findIndex(e => e.name === entry.terms)].value += entry.clicks\r\n            } else {\r\n                var newEntry = {\r\n                    id: entry.terms,\r\n                    name: entry.terms, \r\n                    value: entry.clicks\r\n                }\r\n                newData.push(newEntry)\r\n            }\r\n        })\r\n\r\n        for(var i = 0; i < newData.length; i++){\r\n            if(newData[i].value < minClicks){\r\n                others += newData[i].value\r\n                newData.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n\r\n        if(showOthers){\r\n            var otherEntry = {\r\n                id: \"others\",\r\n                name: \"others\",\r\n                value: others\r\n            }\r\n            newData.unshift(otherEntry)\r\n        }\r\n        setData(newData)\r\n    }, [entries, minClicks, showOthers])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetClickThrough(entries) {\r\n    const [clicks, setClicks] = useState(0)\r\n    const [impressions, setImpressions] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setClicks(0)\r\n        setImpressions(0)\r\n\r\n        entries.map(function(entry){\r\n            setClicks(clicks => clicks + entry.clicks)\r\n            setImpressions(impressions => impressions + entry.impressions)\r\n        })\r\n\r\n    }, [entries])\r\n\r\n    return Math.round((clicks/impressions + Number.EPSILON) * 100)\r\n}\r\n\r\nfunction GetClicksAndImpressionsOverTime(entries, latestDate) {\r\n    const [data, setData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newData = [{\r\n            id: \"impressions\",\r\n            data: []\r\n        },\r\n        {\r\n            id: \"clicks\",\r\n            data: []\r\n        }]\r\n\r\n        entries.map(function(entry){\r\n            const date = entry.date.split(\"-\")\r\n\r\n            if((date[0] === latestDate[0] && parseInt(date[1]) <= parseInt(latestDate[1])) || (date[0] === latestDate[0] -1 && parseInt(date[1]) > parseInt(latestDate[1]))) {\r\n                if(newData[0].data.find(e => e.x === entry.date)){\r\n                    newData[0].data[newData[0].data.findIndex(e => e.x === entry.date)].y += entry.impressions\r\n                    newData[1].data[newData[1].data.findIndex(e => e.x === entry.date)].y += entry.clicks\r\n                } else {\r\n                    newData[0].data.push({\r\n                        x: entry.date,\r\n                        y: entry.impressions\r\n                    })\r\n                    newData[1].data.push({\r\n                        x: entry.date,\r\n                        y: entry.clicks\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setData(newData)\r\n\r\n    }, [entries, latestDate])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetClickThroughOverTime(entries, latestDate) {\r\n    const [data, setData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newData = [{ id: \"Click-Through\", data: []}]\r\n        var clicks = [] \r\n        var impressions = []\r\n\r\n        entries.map(function(entry){\r\n            const date = entry.date.split(\"-\")\r\n\r\n            if((date[0] === latestDate[0] && parseInt(date[1]) <= parseInt(latestDate[1])) || (date[0] === latestDate[0] -1 && parseInt(date[1]) > parseInt(latestDate[1]))) {\r\n                if(newData[0].data.find(e => e.x === entry.date)){\r\n                    clicks[clicks.findIndex(e => e.date === entry.date)].val += entry.clicks\r\n                    impressions[impressions.findIndex(e => e.date === entry.date)].val += entry.impressions\r\n                } else {\r\n                    newData[0].data.push({\r\n                        x: entry.date,\r\n                        y: 0\r\n                    })\r\n                    clicks.push({\r\n                        date: entry.date,\r\n                        val: entry.clicks\r\n                    })\r\n                    impressions.push({\r\n                        date: entry.date,\r\n                        val: entry.impressions\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n        for(var i = 0; i < newData[0].data.length; i++){\r\n            newData[0].data[i].y = Math.round((clicks[i].val / impressions[i].val + Number.EPSILON) * 100)\r\n        }\r\n\r\n        setData(newData)\r\n\r\n    },[entries, latestDate])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetCustomAreaBump(entries, terms) {\r\n    const [areaData, setAreaData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newAreaData = []\r\n\r\n        entries.map(function(entry){\r\n            if(terms.find(e => e === entry.terms)){\r\n                if(newAreaData.find(e => e.id === entry.terms)){\r\n                    newAreaData[newAreaData.findIndex(e => e.id === entry.terms)].data.push({\r\n                        x: entry.date,\r\n                        y: entry.impressions\r\n                    })\r\n                } else {\r\n                    newAreaData.push({\r\n                        id: entry.terms,\r\n                        data: [{\r\n                            x: entry.date,\r\n                            y: entry.impressions\r\n                        }]\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setAreaData(newAreaData)\r\n    }, [entries, terms])\r\n\r\n    return(areaData)\r\n}\r\n\r\nfunction GetCustomBar(entries, terms){\r\n    const [barData, setBarData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newBarData = []\r\n\r\n        entries.map(function(entry){\r\n            if(terms.find(e => e === entry.terms)){\r\n                if(newBarData.find(e => e.date === entry.date)){\r\n                    newBarData[newBarData.findIndex(e => e.date === entry.date)][entry.terms] = entry.impressions\r\n                } else {\r\n                    newBarData.push({\r\n                        \"date\": entry.date,\r\n                        [entry.terms]: entry.impressions,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setBarData(newBarData)\r\n    }, [entries, terms])\r\n\r\n    return(barData)\r\n}\r\n\r\nfunction GetCustomBump(entries, terms){\r\n    const [BumpData, setBumpData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newBumpData = []\r\n\r\n        entries.map(function(entry){\r\n            if(terms.find(e => e === entry.terms)){\r\n                if(newBumpData.find(e => e.id === entry.terms)){\r\n                    newBumpData[newBumpData.findIndex(e => e.id === entry.terms)].data.push({\r\n                        x: entry.date,\r\n                        y: entry.impressions\r\n                    })\r\n                } else {\r\n                    newBumpData.push({\r\n                        id: entry.terms,\r\n                        data: [{\r\n                            x: entry.date,\r\n                            y: entry.impressions\r\n                        }]\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setBumpData(newBumpData)\r\n    }, [entries, terms])\r\n\r\n    return(BumpData)\r\n}\r\n\r\n\r\n//// RENDER VIEW ////\r\nconst GoogleChart = (props) => {\r\n    const [minImpr, setMinImpr] = useState(50)\r\n    const [minClicks, setMinClicks] = useState(10)\r\n    const [showOthers, setShowOthers] = useState(true)\r\n    const [allEntries, setAllEntries] = useState([])\r\n    const [latestDate, setLatestDate] = useState([])\r\n    const [terms, setTerms] = useState([\"biobank\",\"ffpe\",\"ffpe tissue\"])\r\n\r\n    useEffect(() => {\r\n        const url = Constants.API_URL_GOOGLE_ENTRIES;\r\n\r\n        axios.get(url)\r\n        .then(res => {\r\n            setAllEntries(res.data);\r\n        })\r\n\r\n        axios.get([url,'/GetCurrentMonth'].join(''))\r\n        .then(res => {\r\n            setLatestDate(res.data.split('-'))\r\n        })\r\n    }, [])\r\n\r\n    const onInputChange = (e) => {\r\n        switch(e.target.name){\r\n            case 'minImpr':\r\n                setMinImpr(e.target.value)\r\n                return\r\n            case 'minClicks':\r\n                setMinClicks(e.target.value)\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <button onClick={() => {props.setShowGraphs(false); props.setActiveTable('')}} className={styles.button_backarrow}>&#60;</button>\r\n            {/* First Block */}\r\n            <div className={styles.grid_container_3_items}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last Month</option>\r\n                        <option>Last 3 Months</option>\r\n                        <option>Last Year</option>\r\n                        <option>All Time</option>\r\n                    </select>\r\n                    Show Others\r\n                    <input type=\"checkbox\" onChange={() => setShowOthers(!showOthers)}></input>\r\n                </div>\r\n                <div className={styles.left_wrapper}>\r\n                    <h3>Impressions</h3>\r\n                    <PieChart data={GetImpressions(allEntries, minImpr, showOthers)} scheme={primaryScheme}/>\r\n                    <div className={styles.min}>Min. Impressions: <input className={styles.min_input} value={minImpr} name=\"minImpr\" type=\"number\" onChange={onInputChange}/> </div>\r\n                </div>\r\n                <div className={styles.middle_wrapper}>\r\n                    <h3>vs.</h3> <br/><br/><br/><br/>\r\n                    <h4>Click-Through-Rate:</h4>\r\n                    {GetClickThrough(allEntries)} %\r\n                </div>\r\n                <div className={styles.right_wrapper}>\r\n                    <h3>Clicks</h3>\r\n                    <PieChart data={GetClicks(allEntries, minClicks, showOthers)} scheme={primaryScheme}/>\r\n                    <div className={styles.min}>Min. Clicks: <input className={styles.min_input} value={minClicks} name=\"minClicks\" type=\"number\" onChange={onInputChange}/> </div>\r\n                </div>\r\n            </div>\r\n            {/* Second Block */}\r\n            <div className={styles.grid_container_2_items}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last 3 Months</option>\r\n                        <option>Last Year</option>\r\n                        <option>All Time</option>\r\n                    </select>\r\n                </div>\r\n                <div className={styles.left_wrapper}>\r\n                    <h3>Impressions & Clicks</h3>\r\n                    <LineChart data={GetClicksAndImpressionsOverTime(allEntries, latestDate)} scheme={[primaryScheme[0], secondaryScheme[0]]} axisBottom={\"time\"} axisLeft={\"\"}/>\r\n                </div>\r\n                <div className={styles.middle_wrapper}>\r\n                    <h3>Click-Through-Rate</h3>\r\n                    <LineChart data={GetClickThroughOverTime(allEntries, latestDate)} scheme={primaryScheme} axisBottom={\"time\"} axisLeft={\"%\"}/>\r\n                </div>\r\n            </div>\r\n            {/* Third Block */}\r\n            <div className={styles.grid_container_2_items_4_rows}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last 3 Month</option>\r\n                        <option>Last 6 Months</option>\r\n                        <option>Last Year</option>\r\n                    </select>\r\n                </div>\r\n                <div className={styles.wrapper_2_wide_top}>\r\n                    <h3>Specific Terms over Time</h3>\r\n                    <AreaBump data={GetCustomAreaBump(allEntries, terms)} scheme={primaryScheme} axisBottom={\"time\"} axisLeft={\"%\"}/>\r\n                </div>\r\n                <div className={styles.wrapper_2_wide_mid}>\r\n                    {terms.map((item,i) => (<label className={styles.terms} key={i}>\r\n                        {item}\r\n                        <button onClick={() => {removeFromTerms(item)}}>X</button>\r\n                    </label>))}\r\n                    <PopoverButton terms={terms} addToTerms={addToTerms}/>\r\n                </div>\r\n                <div className={styles.wrapper_left_bottom}>\r\n                    <BarChart data={GetCustomBar(allEntries, terms)} scheme={primaryScheme} keys={terms} index={\"date\"} xAxis={\"dates\"} yAxis={\"\"}/>\r\n                </div>\r\n                <div className={styles.wrapper_right_bottom}>\r\n                    <LineChart data={GetCustomBump(allEntries, terms)} scheme={primaryScheme}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    function addToTerms(term){\r\n        if(!allEntries.find(e => e.terms === term)){\r\n            alert(\"Term \" + term + \" does not exist\")\r\n            return\r\n        }\r\n\r\n        let newTerms = []\r\n        for(let newTerm in terms){\r\n            newTerms.push(terms[newTerm])\r\n        }\r\n        newTerms.push(term)\r\n        setTerms(newTerms)\r\n    }\r\n\r\n    function removeFromTerms(item){\r\n        setTerms(\r\n            terms.filter(a =>\r\n              a !== item\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default GoogleChart","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\bingGraphs.jsx",["155","156","157","158","159","160","161","162"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { PieChart } from \"./charts/pieChart\";\r\nimport { LineChart } from \"./charts/lineChart\";\r\nimport { AreaBump } from \"./charts/areabumpChart\";\r\nimport { BarChart } from \"./charts/barChart\";\r\nimport Constants from \"../../../utilities/Constants\";\r\nimport PopoverButton from \"./popover\";\r\nimport styles from \"./graphs.module.css\"\r\nimport axios from \"axios\";\r\n\r\nvar primaryScheme = ['#5fc431','#71d055','#83dc73','#96e890','#abf4ab','#c0ffc6','#a1e5ad','#82cc96','#62b37f','#429a6a','#188255','#429a6a','#62b37f','#82cc96','#a1e5ad','#c0ffc6','#abf4ab','#96e890','#83dc73','#71d055']\r\nvar secondaryScheme = ['#d15454','#e16c7c','#ec86a1','#f4a2c3','#f9bee1','#ffd9fa','#e6b2e3','#cc8bce','#b066bb','#9140a8','#711496']\r\n\r\n//// MAPPING FUNCTIONS ////\r\nfunction GetImpressions(entries, minImpr, showOthers) {\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        setData([])\r\n        var newData = []\r\n        var others = 0;\r\n\r\n        entries.map(function(entry){\r\n            if(newData.find(e => e.name === entry.terms)){\r\n                newData[newData.findIndex(e => e.name === entry.terms)].value += entry.impressions\r\n            } else {\r\n                var newEntry = {\r\n                    id: entry.terms,\r\n                    name: entry.terms, \r\n                    value: entry.impressions\r\n                }\r\n                newData.push(newEntry)\r\n            }\r\n        })\r\n\r\n        for(var i = 0; i < newData.length; i++){\r\n            if(newData[i].value < minImpr){\r\n                others += newData[i].value\r\n                newData.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n    \r\n        if(showOthers){\r\n            var otherEntry = {\r\n                id: \"others\",\r\n                name: \"others\",\r\n                value: others\r\n            }\r\n            newData.push(otherEntry)\r\n        }\r\n        setData(newData)\r\n    }, [entries, minImpr, showOthers])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetClicks(entries, minClicks, showOthers) {\r\n    const [data, setData] = useState([])\r\n    \r\n    useEffect(() => {\r\n        setData([])\r\n        var newData = []\r\n        var others = 0;\r\n\r\n        entries.map(function(entry){\r\n            if(newData.find(e => e.name === entry.terms)){\r\n                newData[newData.findIndex(e => e.name === entry.terms)].value += entry.clicks\r\n            } else {\r\n                var newEntry = {\r\n                    id: entry.terms,\r\n                    name: entry.terms, \r\n                    value: entry.clicks\r\n                }\r\n                newData.push(newEntry)\r\n            }\r\n        })\r\n\r\n        for(var i = 0; i < newData.length; i++){\r\n            if(newData[i].value < minClicks){\r\n                others += newData[i].value\r\n                newData.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n\r\n        if(showOthers){\r\n            var otherEntry = {\r\n                id: \"others\",\r\n                name: \"others\",\r\n                value: others\r\n            }\r\n            newData.unshift(otherEntry)\r\n        }\r\n        setData(newData)\r\n    }, [entries, minClicks, showOthers])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetClickThrough(entries) {\r\n    const [clicks, setClicks] = useState(0)\r\n    const [impressions, setImpressions] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setClicks(0)\r\n        setImpressions(0)\r\n\r\n        entries.map(function(entry){\r\n            setClicks(clicks => clicks + entry.clicks)\r\n            setImpressions(impressions => impressions + entry.impressions)\r\n        })\r\n\r\n    }, [entries])\r\n\r\n    return Math.round((clicks/impressions + Number.EPSILON) * 100)\r\n}\r\n\r\nfunction GetClicksAndImpressionsOverTime(entries, latestDate) {\r\n    const [data, setData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newData = [{\r\n            id: \"impressions\",\r\n            data: []\r\n        },\r\n        {\r\n            id: \"clicks\",\r\n            data: []\r\n        }]\r\n\r\n        entries.map(function(entry){\r\n            const date = entry.date.split(\"-\")\r\n\r\n            if((date[0] === latestDate[0] && parseInt(date[1]) <= parseInt(latestDate[1])) || (date[0] === latestDate[0] -1 && parseInt(date[1]) > parseInt(latestDate[1]))) {\r\n                if(newData[0].data.find(e => e.x === entry.date)){\r\n                    newData[0].data[newData[0].data.findIndex(e => e.x === entry.date)].y += entry.impressions\r\n                    newData[1].data[newData[1].data.findIndex(e => e.x === entry.date)].y += entry.clicks\r\n                } else {\r\n                    newData[0].data.push({\r\n                        x: entry.date,\r\n                        y: entry.impressions\r\n                    })\r\n                    newData[1].data.push({\r\n                        x: entry.date,\r\n                        y: entry.clicks\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setData(newData)\r\n\r\n    }, [entries, latestDate])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetClickThroughOverTime(entries, latestDate) {\r\n    const [data, setData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newData = [{ id: \"Click-Through\", data: []}]\r\n        var clicks = [] \r\n        var impressions = []\r\n\r\n        entries.map(function(entry){\r\n            const date = entry.date.split(\"-\")\r\n\r\n            if((date[0] === latestDate[0] && parseInt(date[1]) <= parseInt(latestDate[1])) || (date[0] === latestDate[0] -1 && parseInt(date[1]) > parseInt(latestDate[1]))) {\r\n                if(newData[0].data.find(e => e.x === entry.date)){\r\n                    clicks[clicks.findIndex(e => e.date === entry.date)].val += entry.clicks\r\n                    impressions[impressions.findIndex(e => e.date === entry.date)].val += entry.impressions\r\n                } else {\r\n                    newData[0].data.push({\r\n                        x: entry.date,\r\n                        y: 0\r\n                    })\r\n                    clicks.push({\r\n                        date: entry.date,\r\n                        val: entry.clicks\r\n                    })\r\n                    impressions.push({\r\n                        date: entry.date,\r\n                        val: entry.impressions\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n        for(var i = 0; i < newData[0].data.length; i++){\r\n            newData[0].data[i].y = Math.round((clicks[i].val / impressions[i].val + Number.EPSILON) * 100)\r\n        }\r\n\r\n        setData(newData)\r\n\r\n    },[entries, latestDate])\r\n\r\n    return data\r\n}\r\n\r\nfunction GetCustomAreaBump(entries, terms) {\r\n    const [areaData, setAreaData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newAreaData = []\r\n\r\n        entries.map(function(entry){\r\n            if(terms.find(e => e === entry.terms)){\r\n                if(newAreaData.find(e => e.id === entry.terms)){\r\n                    newAreaData[newAreaData.findIndex(e => e.id === entry.terms)].data.push({\r\n                        x: entry.date,\r\n                        y: entry.impressions\r\n                    })\r\n                } else {\r\n                    newAreaData.push({\r\n                        id: entry.terms,\r\n                        data: [{\r\n                            x: entry.date,\r\n                            y: entry.impressions\r\n                        }]\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setAreaData(newAreaData)\r\n    }, [entries, terms])\r\n\r\n    return(areaData)\r\n}\r\n\r\nfunction GetCustomBar(entries, terms){\r\n    const [barData, setBarData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newBarData = []\r\n\r\n        entries.map(function(entry){\r\n            if(terms.find(e => e === entry.terms)){\r\n                if(newBarData.find(e => e.date === entry.date)){\r\n                    newBarData[newBarData.findIndex(e => e.date === entry.date)][entry.terms] = entry.impressions\r\n                } else {\r\n                    newBarData.push({\r\n                        \"date\": entry.date,\r\n                        [entry.terms]: entry.impressions,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setBarData(newBarData)\r\n    }, [entries, terms])\r\n\r\n    return(barData)\r\n}\r\n\r\nfunction GetCustomBump(entries, terms){\r\n    const [BumpData, setBumpData] = useState()\r\n\r\n    useEffect(() => {\r\n        var newBumpData = []\r\n\r\n        entries.map(function(entry){\r\n            if(terms.find(e => e === entry.terms)){\r\n                if(newBumpData.find(e => e.id === entry.terms)){\r\n                    newBumpData[newBumpData.findIndex(e => e.id === entry.terms)].data.push({\r\n                        x: entry.date,\r\n                        y: entry.impressions\r\n                    })\r\n                } else {\r\n                    newBumpData.push({\r\n                        id: entry.terms,\r\n                        data: [{\r\n                            x: entry.date,\r\n                            y: entry.impressions\r\n                        }]\r\n                    })\r\n                }\r\n            }\r\n        })\r\n        setBumpData(newBumpData)\r\n    }, [entries, terms])\r\n\r\n    return(BumpData)\r\n}\r\n\r\n//// RENDER VIEW ////\r\nconst BingChart = (props) => {\r\n    const [minImpr, setMinImpr] = useState(5)\r\n    const [minClicks, setMinClicks] = useState(3)\r\n    const [showOthers, setShowOthers] = useState(true)\r\n    const [allEntries, setAllEntries] = useState([])\r\n    const [latestDate, setLatestDate] = useState([])\r\n    const [terms, setTerms] = useState([\"biobank\",\"ffpe tissue\",\"biorepository\"])\r\n\r\n    useEffect(() => {\r\n        const url = Constants.API_URL_BING_ENTRIES;\r\n\r\n        axios.get(url)\r\n        .then(res => {\r\n            setAllEntries(res.data);\r\n        })\r\n\r\n        axios.get([url,'/GetCurrentMonth'].join(''))\r\n        .then(res => {\r\n            setLatestDate(res.data.split('-'))\r\n        })\r\n    }, [])\r\n\r\n    const onInputChange = (e) => {\r\n        switch(e.target.name){\r\n            case 'minImpr':\r\n                setMinImpr(e.target.value)\r\n                return\r\n            case 'minClicks':\r\n                setMinClicks(e.target.value)\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <button onClick={() => {props.setShowGraphs(false); props.setActiveTable('')}} className={styles.button_backarrow}>&#60;</button>\r\n            {/* First Block */}\r\n            <div className={styles.grid_container_3_items}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last Month</option>\r\n                        <option>Last 3 Months</option>\r\n                        <option>Last Year</option>\r\n                        <option>All Time</option>\r\n                    </select>\r\n                    Show Others\r\n                    <input type=\"checkbox\" onChange={() => setShowOthers(!showOthers)}></input>\r\n                </div>\r\n                <div className={styles.left_wrapper}>\r\n                    <h3>Impressions</h3>\r\n                    <PieChart data={GetImpressions(allEntries, minImpr, showOthers)} scheme={primaryScheme}/>\r\n                    <div className={styles.min}>Min. Impressions: <input className={styles.min_input} value={minImpr} name=\"minImpr\" type=\"number\" onChange={onInputChange}/> </div>\r\n                </div>\r\n                <div className={styles.middle_wrapper}>\r\n                    <h3>vs.</h3> <br/><br/><br/><br/>\r\n                    <h4>Click-Through-Rate:</h4>\r\n                    {GetClickThrough(allEntries)} %\r\n                </div>\r\n                <div className={styles.right_wrapper}>\r\n                    <h3>Clicks</h3>\r\n                    <PieChart data={GetClicks(allEntries, minClicks, showOthers)} scheme={primaryScheme}/>\r\n                    <div className={styles.min}>Min. Clicks: <input className={styles.min_input} value={minClicks} name=\"minClicks\" type=\"number\" onChange={onInputChange}/> </div>\r\n                </div>\r\n            </div>\r\n            {/* Second Block */}\r\n            <div className={styles.grid_container_2_items}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last 3 Months</option>\r\n                        <option>Last Year</option>\r\n                        <option>All Time</option>\r\n                    </select>\r\n                </div>\r\n                <div className={styles.left_wrapper}>\r\n                    <h3>Impressions & Clicks</h3>\r\n                    <LineChart data={GetClicksAndImpressionsOverTime(allEntries, latestDate)} scheme={[primaryScheme[0], secondaryScheme[0]]} axisBottom={\"time\"} axisLeft={\"\"}/>\r\n                </div>\r\n                <div className={styles.middle_wrapper}>\r\n                    <h3>Click-Through-Rate</h3>\r\n                    <LineChart data={GetClickThroughOverTime(allEntries, latestDate)} scheme={primaryScheme} axisBottom={\"time\"} axisLeft={\"%\"}/>\r\n                </div>\r\n            </div>\r\n            {/* Third Block */}\r\n            <div className={styles.grid_container_2_items_4_rows}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last 3 Month</option>\r\n                        <option>Last 6 Months</option>\r\n                        <option>Last Year</option>\r\n                    </select>\r\n                </div>\r\n                <div className={styles.wrapper_2_wide_top}>\r\n                    <h3>Specific Terms over Time</h3>\r\n                    <AreaBump data={GetCustomAreaBump(allEntries, terms)} scheme={primaryScheme} axisBottom={\"time\"} axisLeft={\"%\"}/>\r\n                </div>\r\n                <div className={styles.wrapper_2_wide_mid}>\r\n                    {terms.map((item,i) => (<label className={styles.terms} key={i}>\r\n                        {item}\r\n                        <button onClick={() => {removeFromTerms(item)}}>X</button>\r\n                    </label>))}\r\n                    <PopoverButton terms={terms} addToTerms={addToTerms}/>\r\n                </div>\r\n                <div className={styles.wrapper_left_bottom}>\r\n                    <BarChart data={GetCustomBar(allEntries, terms)} scheme={primaryScheme} keys={terms} index={\"date\"} xAxis={\"dates\"} yAxis={\"\"}/>\r\n                </div>\r\n                <div className={styles.wrapper_right_bottom}>\r\n                    <LineChart data={GetCustomBump(allEntries, terms)} scheme={primaryScheme}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    function addToTerms(term){\r\n        if(!allEntries.find(e => e.terms === term)){\r\n            alert(\"Term \" + term + \" does not exist\")\r\n            return\r\n        }\r\n\r\n        let newTerms = []\r\n        for(let newTerm in terms){\r\n            newTerms.push(terms[newTerm])\r\n        }\r\n        newTerms.push(term)\r\n        setTerms(newTerms)\r\n    }\r\n\r\n    function removeFromTerms(item){\r\n        setTerms(\r\n            terms.filter(a =>\r\n              a !== item\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nexport default BingChart","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\leadGraphs.jsx",["163","164","165","166","167","168"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { PieChart } from \"./charts/pieChart\";\r\nimport { LineChart } from \"./charts/lineChart\";\r\nimport Constants from \"../../../utilities/Constants\";\r\nimport styles from \"./graphs.module.css\"\r\nimport axios from \"axios\";\r\n\r\nvar primaryScheme = ['#5fc431','#71d055','#83dc73','#96e890','#abf4ab','#c0ffc6','#a1e5ad','#82cc96','#62b37f','#429a6a','#188255','#429a6a','#62b37f','#82cc96','#a1e5ad','#c0ffc6','#abf4ab','#96e890','#83dc73','#71d055']\r\nvar secondaryScheme = ['#d15454','#e16c7c','#ec86a1','#f4a2c3','#f9bee1','#ffd9fa','#e6b2e3','#cc8bce','#b066bb','#9140a8','#711496']\r\n\r\n//// MAPPING FUNCTIONS ////\r\nfunction getMedicalField(entries, minField, showOthers) {\r\n    const data = []\r\n    var others = 0\r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.fieldOfInterest)) {\r\n            data[data.findIndex((e => e.id === entry.fieldOfInterest))].value++\r\n        } else {\r\n            data.push({\r\n                id: entry.fieldOfInterest,\r\n                name: entry.fieldOfInterest,\r\n                value: 1\r\n            })\r\n        }\r\n    })\r\n\r\n    for(let i = 0; i <= data.length; i++){\r\n        if(data[i]){\r\n            if(data[i].value < minField || data[i].id === null){\r\n                others += data[i].value\r\n                data.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n    }\r\n\r\n    if(showOthers) {\r\n        data.push({\r\n            id: \"others\",\r\n            name: \"others\",\r\n            value: others\r\n        })\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nfunction getLeadStatus(entries, showOther) {\r\n    const data = []\r\n    var others = 0    \r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.leadStatus)) {\r\n            data[data.findIndex((e => e.id === entry.leadStatus))].value++\r\n        } else {\r\n            data.push({\r\n                id: entry.leadStatus,\r\n                name: entry.leadStatus,\r\n                value: 1\r\n            })\r\n        }\r\n    })\r\n\r\n    for(let i = 0; i <= data.length; i++){\r\n        if(data[i]){\r\n            if(data[i].id === null){\r\n                others += data[i].value\r\n                data.splice(i, 1)\r\n                i--\r\n            }\r\n            var _value = data[i].value\r\n            data[i].value = Math.trunc(((_value / entries.length - 1) + 1 ) * 100) \r\n        }\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nfunction getLeadsOverTime(entries) {\r\n    const data = [{\r\n        id: \"dates\",\r\n        color: \"hsl(48, 70%, 50%)\",\r\n        data: []\r\n    }]\r\n\r\n    entries.map(function(entry){\r\n        if(data[0].data.find(e => e.x === truncateTime(entry.leadDate))) {\r\n            data[0].data[data[0].data.findIndex((e => e.x === truncateTime(entry.leadDate)))].y++\r\n        } else {\r\n            data[0].data.push({\r\n                x: truncateTime(entry.leadDate),\r\n                y: 1\r\n            })\r\n        }\r\n    })\r\n      data.sort((a,b) => a[1] - b[1]);\r\n\r\n    return data\r\n}\r\n\r\nfunction truncateTime(str) {\r\n    return str.slice(0, 10)\r\n} \r\n\r\n//// RENDER VIEW ////\r\nconst LeadChart = (props) => {\r\n    const [minField, setMinField] = useState(10)\r\n    const [showOtherFields, setShowOtherFields] = useState(false)\r\n    const [showOthers, setShowOthers] = useState(true)\r\n\r\n    const onInputChange = (e) => {\r\n        switch(e.target.name){\r\n            case 'minField':\r\n                setMinField(e.target.value)\r\n                return\r\n            case 'showOtherFields':\r\n                setShowOtherFields(!showOtherFields)\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <button onClick={() => {props.setShowGraphs(false); props.setActiveTable('')}} className={styles.button_backarrow}>&#60;</button>\r\n            <div className={styles.grid_container_2_items_3_rows}>\r\n                <div className={styles.settings}>\r\n                    Period:\r\n                    <select>\r\n                        <option defaultValue={true}>Last Month</option>\r\n                        <option>Last 3 Months</option>\r\n                        <option>Last Year</option>\r\n                        <option>All Time</option>\r\n                    </select>\r\n                    Show Others\r\n                    <input type=\"checkbox\" onChange={() => setShowOthers(!showOthers)}></input>\r\n                </div>\r\n                <div className={styles.left_wrapper}>\r\n                    <h3>Customer Fields</h3>\r\n                    <PieChart data={GetAllEntries('Field_of_interest', minField, showOthers)} scheme={primaryScheme}/>\r\n                    <div className={styles.min}>Min. Occurrences: <input className={styles.min_input} value={minField} name=\"minField\" type=\"number\" onChange={onInputChange}/></div>\r\n                </div>\r\n                <div className={styles.middle_wrapper}>\r\n                    <h3>Status in %</h3>\r\n                    <PieChart data={GetAllEntries('Lead_Status', showOthers)} scheme={secondaryScheme}/>\r\n                </div>\r\n                <div className={styles.center_wrapper}>\r\n                    <h3>Lead Requests Over Time</h3>\r\n                    <LineChart data={GetAllEntries('Lead_Date')} scheme={primaryScheme}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n//// GETTER METHODS ////\r\nfunction GetAllEntries(type, prop1, prop2){\r\n    const url = Constants.API_URL_LEAD_ENTRIES;\r\n    const [entries, setEntries] = useState([])\r\n\r\n    useEffect(() => {\r\n        axios.get(url)\r\n        .then(res => {\r\n            setEntries(res.data);\r\n        })\r\n    }, [])\r\n\r\n    switch(type){\r\n        case 'Field_of_interest':\r\n            return getMedicalField(entries, prop1, prop2)\r\n        case 'Lead_Status':\r\n            return getLeadStatus(entries, prop1)\r\n        case 'Lead_Date':\r\n            return getLeadsOverTime(entries)\r\n    }\r\n}\r\n\r\nexport default LeadChart","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\orderGraphs.jsx",["169","170","171","172","173","174","175","176","177","178"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { PieChart } from \"./charts/pieChart\";\r\nimport { LineChart } from \"./charts/lineChart\";\r\nimport Constants from \"../../../utilities/Constants\";\r\nimport styles from \"./graphs.module.css\";\r\nimport axios from \"axios\";\r\n\r\nvar primaryScheme = ['#5fc431','#71d055','#83dc73','#96e890','#abf4ab','#c0ffc6','#a1e5ad','#82cc96','#62b37f','#429a6a','#188255','#429a6a','#62b37f','#82cc96','#a1e5ad','#c0ffc6','#abf4ab','#96e890','#83dc73','#71d055']\r\nvar secondaryScheme = ['#d15454','#e16c7c','#ec86a1','#f4a2c3','#f9bee1','#ffd9fa','#e6b2e3','#cc8bce','#b066bb','#9140a8','#711496']\r\n\r\n//// MAPPING FUNCTIONS ////\r\nfunction getMatrices(entries, minMatrix, maxMatrix, showOtherMatrices) {\r\n    const data = []\r\n    var others = 0\r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.matrix)) {\r\n            data[data.findIndex((e => e.id === entry.matrix))].value++\r\n        } else {\r\n            data.push({\r\n                id: entry.matrix,\r\n                name: entry.matrix,\r\n                value: 1\r\n            })\r\n        }\r\n    })\r\n\r\n    for(let i = 0; i <= data.length; i++){\r\n        if(data[i]){\r\n            if(data[i].value < minMatrix || data[i].value > maxMatrix){\r\n                others += data[i].value\r\n                data.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n    }\r\n\r\n    if(showOtherMatrices) {\r\n        data.push({\r\n            id: \"others\",\r\n            name: \"others\",\r\n            value: others\r\n        })\r\n    }\r\n    return data\r\n}\r\n\r\nfunction getLabParameter(entries, minParams, maxParams, showOtherParams) {\r\n    const data = []\r\n    var others = 0\r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.labParameter)) {\r\n            data[data.findIndex((e => e.id === entry.labParameter))].value++\r\n        } else if (entry.labParameter != null) {\r\n            data.push({\r\n                id: entry.labParameter,\r\n                name: entry.labParameter,\r\n                value: 1\r\n            })\r\n        }\r\n    })\r\n\r\n    for(let i = 0; i <= data.length; i++){\r\n        if(data[i]){\r\n            if(data[i].value < minParams || data[i].value > maxParams){\r\n                others += data[i].value\r\n                data.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n    }\r\n\r\n    if(showOtherParams) {\r\n        data.push({\r\n            id: \"others\",\r\n            name: \"others\",\r\n            value: others\r\n        })\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nfunction getDiagnosis(entries, minDiagnoses, maxDiagnoses, showOtherDiagnoses) {\r\n    const data = []\r\n    var others = 0\r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.diagnosis)) {\r\n            data[data.findIndex((e => e.id === entry.diagnosis))].value++\r\n        } else if(entry.diagnosis != null) {             \r\n            data.push({\r\n                id: entry.diagnosis,\r\n                name: entry.diagnosis,\r\n                value: 1\r\n            })            \r\n        }\r\n    })\r\n\r\n    for(let i = 0; i <= data.length; i++){\r\n        if(data[i]){\r\n            if(data[i].value < minDiagnoses || data[i].value > maxDiagnoses){\r\n                others += data[i].value\r\n                data.splice(i, 1)\r\n                i--\r\n            }\r\n        }\r\n    }\r\n\r\n    if(showOtherDiagnoses) {\r\n        data.push({\r\n            id: \"others\",\r\n            name: \"others\",\r\n            value: others\r\n        })\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nfunction getAverageQuantity(entries, minDiagnoses, maxDiagnoses, showOtherDiagnoses) {\r\n    const data = []\r\n    var others = 0\r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.unit)) {\r\n            data[data.findIndex((e => e.id === entry.unit))].occurrences++\r\n        } else if(entry.unit != null) {             \r\n            data.push({\r\n                id: entry.unit,\r\n                name: entry.unit,\r\n                value: 1,\r\n                occurrences: 1\r\n            })            \r\n        }\r\n    })\r\n\r\n    // for(let i = 0; i <= data.length; i++){\r\n    //     if(data[i]){\r\n    //         if(data[i].id === \"ml\"){\r\n    //             others += data[i].value\r\n    //             data.splice(i, 1)\r\n    //             i--\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // if(showOtherDiagnoses) {\r\n    //     data.push({\r\n    //         id: \"others\",\r\n    //         name: \"others\",\r\n    //         value: others\r\n    //     })\r\n    // }\r\n\r\n    return data\r\n}\r\n\r\nfunction getResult(entries) {\r\n    const data = []\r\n\r\n    entries.map(function(entry){\r\n        if(data.find(e => e.id === entry.resultInterpretation)) {\r\n            data[data.findIndex((e => e.id === entry.resultInterpretation))].value++\r\n        } else if(entry.resultInterpretation != null) {             \r\n            data.push({\r\n                id: entry.resultInterpretation,\r\n                name: entry.resultInterpretation,\r\n                value: 1\r\n            })            \r\n        }\r\n    })\r\n\r\n    for(let i = 0; i <= data.length; i++){\r\n        if(data[i]){\r\n            if(data[i].id === null || data[i].id === \"detected\" || data[i].id === \"Detected\" || data[i].id === \"not detected\"){\r\n                data.splice(i, 1)\r\n                i--\r\n            }\r\n            if(data[i].id === \"Positive\"){\r\n                data[data.findIndex((e => e.id === \"positive\"))].value +=  data[i].value\r\n                data.splice(i, 1)\r\n                //i--\r\n            }\r\n            if(data[i].id === \"Negative\"){\r\n                data[data.findIndex((e => e.id === \"negative\"))].value +=  data[i].value\r\n                data.splice(i, 1)\r\n                //i--\r\n            }\r\n            var _value = data[i].value\r\n            //data[i].value = Math.trunc(((_value / entries.length - 1) + 1 ) * 100) \r\n        }\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nfunction getOrders(entries) {\r\n    const data = [{\r\n        id: \"dates\",\r\n        color: \"hsl(48, 70%, 50%)\",\r\n        data: []\r\n    }]\r\n\r\n    entries.map(function(entry){\r\n        if(data[0].data.find(e => e.x === truncateTime(entry.orderDate))) {\r\n            data[0].data[data[0].data.findIndex((e => e.x === truncateTime(entry.orderDate)))].y++\r\n        } else {\r\n            data[0].data.push({\r\n                x: truncateTime(entry.orderDate),\r\n                y: 1\r\n            })\r\n        }\r\n    })\r\n    data[0].data.sort((a,b) => a[1] - b[1]);\r\n\r\n    return data\r\n}\r\n\r\nfunction truncateTime(str) {\r\n    return str.slice(0, 10)\r\n} \r\n\r\n//// RENDER VIEW ////\r\nconst OrderChart = (props) => {\r\n    const [minMatrix, setMinMatrix] = useState(150)\r\n    const [maxMatrix, setMaxMatrix] = useState(400)\r\n    const [showOtherMatrices, setShowOtherMatrices] = useState(false)\r\n    const [minParams, setMinParams] = useState(150)\r\n    const [maxParams, setMaxParams] = useState(1000)\r\n    const [showOtherParams, setShowOtherParam] = useState(false)\r\n    const [minDiagnoses, setMinDiagnoses] = useState(150)\r\n    const [maxDiagnoses, setMaxDiagnoses] = useState(400)\r\n    const [showOtherDiagnoses, setShowOtherDiagnoses] = useState(false)\r\n\r\n    const onInputChange = (e) => {\r\n        switch(e.target.name){\r\n            case 'minMatrix':\r\n                setMinMatrix(e.target.value)\r\n                return\r\n            case 'maxMatrix':\r\n                setMaxMatrix(e.target.value)\r\n                return\r\n            case 'showOtherMatrices':\r\n                setShowOtherMatrices(!showOtherMatrices)\r\n                return\r\n            case 'minParams':\r\n                setMinParams(e.target.value)\r\n                return\r\n            case 'maxParams':\r\n                setMaxParams(e.target.value)\r\n                return\r\n            case 'showOtherParams':\r\n                setShowOtherParam(!showOtherParams)\r\n                return\r\n            case 'minDiagnoses':\r\n                setMinDiagnoses(e.target.value)\r\n                return\r\n            case 'maxDiagnoses':\r\n                setMaxDiagnoses(e.target.value)\r\n                return\r\n            case 'showOtherDiagnoses':\r\n                setShowOtherDiagnoses(!showOtherDiagnoses)\r\n                return\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <button onClick={() => {props.setShowGraphs(false); props.setActiveTable('')}} className={styles.button_backarrow}>&#60;</button>\r\n        <div className={styles.grid_container_3_items_3_rows}>\r\n            <div className={styles.settings}>\r\n                Period:\r\n                <select>\r\n                    <option defaultValue={true}>Last Month</option>\r\n                    <option>Last 3 Months</option>\r\n                    <option>Last Year</option>\r\n                    <option>All Time</option>\r\n                </select>\r\n            </div>\r\n            <div className={styles.left_wrapper}>\r\n                <h3>Matrix</h3>\r\n                <PieChart data={GetAllEntries('matrix', minMatrix, maxMatrix, showOtherMatrices)} scheme={primaryScheme}/>\r\n                <div className={styles.min}>Min: <input className={styles.min_input} value={minMatrix} name=\"minMatrix\" type=\"number\" onChange={onInputChange}/> Max: <input className={styles.min_input} value={maxMatrix} name=\"maxMatrix\" type=\"number\" onChange={onInputChange}/></div>\r\n                <div className={styles.min}>Show Others: <input type=\"checkbox\" value={showOtherMatrices} name=\"showOtherMatrices\" onChange={onInputChange}/> </div>\r\n            </div>\r\n            <div className={styles.middle_wrapper}>\r\n                <h3>Lab Parameters</h3>\r\n                <PieChart data={GetAllEntries('labParameter', minParams, maxParams, showOtherParams)} scheme={secondaryScheme}/>\r\n                <div className={styles.min}>Min: <input className={styles.min_input} value={minParams} name=\"minParams\" type=\"number\" onChange={onInputChange}/> Max: <input className={styles.min_input} value={maxParams} name=\"maxParams\" type=\"number\" onChange={onInputChange}/></div>\r\n                <div className={styles.min}>Show Others: <input type=\"checkbox\" value={showOtherParams} name=\"showOtherParams\" onChange={onInputChange}/> </div>\r\n\r\n            </div>\r\n            {/*<div className={styles.right_wrapper}>\r\n                <h3>Diagnosis</h3>\r\n                <PieChart data={GetAllEntries('diagnosis', minDiagnoses, maxDiagnoses, showOtherDiagnoses)} scheme={primaryScheme}/>\r\n                <div className={styles.min}>Min: <input className={styles.min_input} value={minDiagnoses} name=\"minDiagnoses\" type=\"number\" onChange={onInputChange}/> Max: <input className={styles.min_input} value={maxDiagnoses} name=\"maxDiagnoses\" type=\"number\" onChange={onInputChange}/></div>\r\n                <div className={styles.min}>Show Others: <input type=\"checkbox\" value={showOtherDiagnoses} name=\"showOtherDiagnoses\" onChange={onInputChange}/> </div>\r\n            </div>*/}\r\n            <div className={styles.right_wrapper}>\r\n                <h3>Lab Result</h3>\r\n                <PieChart data={GetAllEntries('Result_Interpretation', minDiagnoses, maxDiagnoses, showOtherDiagnoses)} scheme={primaryScheme}/>\r\n            </div>\r\n            <div className={styles.center_wrapper}>\r\n                <h3>Orders Over Time</h3>\r\n                <LineChart data={GetAllEntries('date')} scheme={primaryScheme}/>\r\n            </div>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\n//// GETTER METHODS ////\r\nfunction GetAllEntries(type, prop1, prop2, prop3){\r\n    const url = Constants.API_URL_ORDER_ENTRIES;\r\n    const [entries, setEntries] = useState([])\r\n\r\n    useEffect(() => {\r\n        axios.get(url)\r\n        .then(res => {\r\n            setEntries(res.data);\r\n        })\r\n    }, [])\r\n\r\n    switch(type){\r\n        case 'matrix':\r\n            return getMatrices(entries, prop1, prop2, prop3)\r\n        case 'labParameter':\r\n            return getLabParameter(entries, prop1, prop2, prop3)\r\n        case 'diagnosis':\r\n            return getDiagnosis(entries, prop1, prop2, prop3)\r\n        case 'Result_Interpretation':\r\n            return getResult(entries)\r\n        case 'date':\r\n            return getOrders(entries)\r\n        default:\r\n            return\r\n    }\r\n}\r\n\r\nexport default OrderChart","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\hooks\\useTable.js",["179","180"],[],"import { useState, useEffect } from \"react\";\r\n\r\n// Calculates the number of pages\r\nconst calculateRange = (data, rowsPerPage) => {\r\n    const range = [];\r\n    const num = Math.ceil(data.length / rowsPerPage);\r\n    let i = 1;\r\n    for (let i = 1; i <= num; i++) {\r\n        range.push(i);\r\n    }\r\n    return range;\r\n};\r\n\r\n// Divides the data between all pages\r\nconst sliceData = (data, page, rowsPerPage) => {\r\n    return data.slice((page - 1) * rowsPerPage, page * rowsPerPage);\r\n};\r\n\r\n// Returns all Values and the spliced data\r\nconst useTable = (data, page, rowsPerPage) => {\r\n    const [tableRange, setTableRange] = useState([]);\r\n    const [slice, setSlice] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      const range = calculateRange(data, rowsPerPage);\r\n      setTableRange([...range]);\r\n  \r\n      const slice = sliceData(data, page, rowsPerPage);\r\n      setSlice([...slice]);\r\n    }, [data, setTableRange, page, setSlice]);\r\n  \r\n    return { slice, range: tableRange };\r\n};\r\n  \r\nexport default useTable;","C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\table\\footer.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\table\\popover.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\pieChart.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\lineChart.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\areabumpChart.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\popover.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\barChart.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\chartScreen\\charts\\bumpChart.jsx",[],[],"C:\\Users\\lucas\\Desktop\\Personal\\Studium\\3.Semester\\WW2\\CBHPredictorTool\\cbh-predictor\\cbh-predictor-app\\src\\components\\screens\\tableScreen\\popover.jsx",["181"],[],"import OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport styles from \"./tablescreen.module.css\"\r\nimport Constants from '../../../utilities/Constants';\r\nimport { useState } from 'react';\r\n\r\nfunction FilterOverlay (handleChange,handleChangeFiltertype, handleSubmit, filtertype, filter) {\r\n    return (\r\n        <Popover id=\"popover-basic\">\r\n            <Popover.Header><h5>Filter</h5></Popover.Header>\r\n            <Popover.Body className={styles.popover}>\r\n                <h4>Type:<select className={styles.filterSelect} onChange={handleChangeFiltertype}>\r\n                    <option value=\"single\">Single</option>\r\n                    <option value=\"range\">Range</option>\r\n                    <option value=\"compare\">Compare</option>\r\n                </select></h4>\r\n                {/*different interfaces for filter*/}\r\n                {filtertype === 'single' &&\r\n                <div>\r\n                    <h5>Column</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"col\" value={filter.col || ''} type=\"text\"/> \r\n                    <h5>Value</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"value\" value={filter.value || ''} type=\"text\"/>\r\n                    <h5>Exact?<input onChange={handleChange} type=\"checkbox\" name=\"exact\" checked={filter.exact}/></h5>\r\n                </div>\r\n                }\r\n                {filtertype === 'range' &&\r\n                    <div>\r\n                    <h5>Column</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"col\" value={filter.col || ''} type=\"text\"/> \r\n                    <h5>From</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"fromVal\" value={filter.fromVal || ''} type=\"text\"/>\r\n                    <h5>To</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"toVal\" value={filter.toVal || ''} type=\"text\"/>\r\n                </div>\r\n                }\r\n                {filtertype === 'compare' &&\r\n                    <div>\r\n                    <h5>Column</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"col\" value={filter.col || ''} type=\"text\"/> \r\n                    <h5>Value</h5>\r\n                    <input className={styles.filterInput} onChange={handleChange} name=\"value\" value={filter.value || ''} type=\"text\"/>\r\n                    <h5>Before?<input onChange={handleChange} type=\"checkbox\" name=\"before\" checked={filter.before}/></h5>\r\n                    \r\n                </div>\r\n                }\r\n                <button className={styles.button_green} onClick={handleSubmit}>Apply</button>\r\n            </Popover.Body>    \r\n        </Popover>\r\n    )\r\n}\r\n\r\nconst PopoverButton = (props) => {\r\n    const initialFilter = { col: \"\", value: \"\", exact: false, fromVal: \"\", toVal: \"\", before: false}\r\n\r\n    const [filter,setFilter] = useState(initialFilter)\r\n    const [filtertype, setfiltertype] = useState('single')\r\n\r\n    const handleChange = (e) => {\r\n        switch (e.target.name) {\r\n            case \"col\":\r\n                setFilter({\r\n                    ...filter,\r\n                    col: e.target.value\r\n                })\r\n                break\r\n            case \"value\":\r\n                setFilter({\r\n                    ...filter,\r\n                    value: e.target.value\r\n                })\r\n                break\r\n            case \"exact\":\r\n                setFilter({\r\n                    ...filter,\r\n                    exact: !filter.exact\r\n                })\r\n                break\r\n            case \"fromVal\":\r\n                setFilter({\r\n                    ...filter,\r\n                    fromVal: e.target.value\r\n                })\r\n                break\r\n            case \"toVal\":\r\n                setFilter({\r\n                    ...filter,\r\n                    toVal: e.target.value\r\n                })\r\n                break\r\n            case \"before\":\r\n                setFilter({\r\n                    ...filter,\r\n                    before: !filter.before\r\n                })\r\n                break     \r\n            default:\r\n                alert(`Error: Attribute ${e.target.name} of filter not found`)\r\n                break\r\n        }\r\n    };\r\n\r\n    const handleChangeFiltertype = (e) => {\r\n        setfiltertype(e.target.value)\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        var newFilter\r\n        switch(filtertype){\r\n            case \"single\":\r\n                if(!filter.col || !filter.value){\r\n                    alert(\"All inputs have to be valid\")\r\n                    return\r\n                } else {\r\n                    newFilter = { type: \"single\", val1: filter.col, val2: filter.value, val3: filter.exact }\r\n                }\r\n                break\r\n            case \"range\":\r\n                if(!filter.col || !filter.fromVal || !filter.toVal){\r\n                    alert(\"All inputs have to be valid\")\r\n                    return\r\n                } else {\r\n                    newFilter = {type: \"range\", val1: filter.col, val2: filter.fromVal, val3: filter.toVal }\r\n                }\r\n                break\r\n            case \"compare\":\r\n                if(!filter.col || !filter.value){\r\n                    alert(\"All inputs have to be valid\")\r\n                    return\r\n                } else {\r\n                    newFilter = { type: \"compare\", val1: filter.col, val2: filter.value, val3: filter.before }\r\n                }\r\n                break\r\n            default:\r\n                alert(`Error: Filter ${filtertype} not found`)\r\n                return\r\n        }\r\n        \r\n        props.addFilter(newFilter)\r\n        setFilter(initialFilter)\r\n    }\r\n\r\n    /*const handleSubmit = () => {\r\n\r\n        var url\r\n        switch (table) {\r\n            case 'Bing':\r\n                url = `${Constants.API_URL_BING_ENTRIES}`;\r\n                break;\r\n            case 'Google':\r\n                url = `${Constants.API_URL_GOOGLE_ENTRIES}`;\r\n                break;\r\n            case 'Lead':\r\n                url = `${Constants.API_URL_LEAD_ENTRIES}`;\r\n                break;\r\n            case 'Order':\r\n                url = `${Constants.API_URL_ORDER_ENTRIES}`;\r\n                break;\r\n            default:\r\n                alert(`Error: Table with name \"${table}\" does not exist`)\r\n                return;\r\n        }\r\n        \r\n        switch (filtertype) {\r\n            case \"single\":\r\n                url = url + `/AddSingleFilter/${filter.col}/${filter.value}/${filter.exact}`;\r\n                break;\r\n            case \"range\":\r\n                url = url + `/AddRangeFilter/${filter.col}/${filter.fromVal}/${filter.toVal}`;\r\n                break;\r\n            case \"compare\":\r\n                url = url + `/AddCompareFilter/${filter.col}/${filter.value}/${filter.before}`;\r\n                break;        \r\n            default:\r\n                break;\r\n        }\r\n    \r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n        .then(response => response.json())\r\n        .then(responseFromServer => {\r\n            console.log(responseFromServer);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(error);\r\n        });\r\n\r\n        switch (table) {\r\n            case 'Bing':\r\n                url = `${Constants.API_URL_BING_ENTRIES}/ApplyFilter/AND`;\r\n                break;\r\n            case 'Google':\r\n                url = `${Constants.API_URL_GOOGLE_ENTRIES}/ApplyFilter/AND`;\r\n                break;\r\n            case 'Lead':\r\n                url = `${Constants.API_URL_LEAD_ENTRIES}/ApplyFilter/AND`;\r\n                break;\r\n            case 'Order':\r\n                url = `${Constants.API_URL_ORDER_ENTRIES}/ApplyFilter/AND`;\r\n                break;\r\n            default:\r\n                alert(`Error: Table with name \"${table}\" does not exist`)\r\n                return;\r\n        }\r\n\r\n        fetch(url, {\r\n            method: 'GET'\r\n        })\r\n        .then(response => response.json())\r\n        .then(entriesFromServer => {\r\n            setEntries(entriesFromServer);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            alert(error);\r\n        });\r\n    }*/\r\n\r\n    return(\r\n        <OverlayTrigger trigger=\"click\" placement=\"left\" overlay={FilterOverlay(handleChange, handleChangeFiltertype, handleSubmit, filtertype, filter)}>\r\n            <button className={styles.button_popover}>+</button>\r\n        </OverlayTrigger>\r\n    )\r\n};\r\n\r\nexport default PopoverButton;\r\n",{"ruleId":"182","severity":1,"message":"183","line":47,"column":71,"nodeType":"184","messageId":"185","endLine":47,"endColumn":73},{"ruleId":"186","severity":1,"message":"187","line":48,"column":61,"nodeType":"188","messageId":"189","endLine":48,"endColumn":91},{"ruleId":"186","severity":1,"message":"187","line":54,"column":61,"nodeType":"188","messageId":"189","endLine":54,"endColumn":91},{"ruleId":"186","severity":1,"message":"190","line":64,"column":57,"nodeType":"188","messageId":"189","endLine":64,"endColumn":87},{"ruleId":"186","severity":1,"message":"191","line":74,"column":61,"nodeType":"188","messageId":"189","endLine":74,"endColumn":91},{"ruleId":"186","severity":1,"message":"191","line":80,"column":61,"nodeType":"188","messageId":"189","endLine":80,"endColumn":91},{"ruleId":"182","severity":1,"message":"183","line":97,"column":69,"nodeType":"184","messageId":"185","endLine":97,"endColumn":71},{"ruleId":"186","severity":1,"message":"192","line":98,"column":61,"nodeType":"188","messageId":"189","endLine":98,"endColumn":89},{"ruleId":"186","severity":1,"message":"192","line":104,"column":61,"nodeType":"188","messageId":"189","endLine":104,"endColumn":89},{"ruleId":"186","severity":1,"message":"193","line":114,"column":57,"nodeType":"188","messageId":"189","endLine":114,"endColumn":85},{"ruleId":"186","severity":1,"message":"194","line":124,"column":61,"nodeType":"188","messageId":"189","endLine":124,"endColumn":89},{"ruleId":"186","severity":1,"message":"194","line":130,"column":61,"nodeType":"188","messageId":"189","endLine":130,"endColumn":89},{"ruleId":"195","severity":1,"message":"196","line":23,"column":21,"nodeType":"197","messageId":"198","endLine":23,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":66,"column":21,"nodeType":"197","messageId":"198","endLine":66,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":109,"column":21,"nodeType":"197","messageId":"198","endLine":109,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":132,"column":21,"nodeType":"197","messageId":"198","endLine":132,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":166,"column":21,"nodeType":"197","messageId":"198","endLine":166,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":207,"column":21,"nodeType":"197","messageId":"198","endLine":207,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":237,"column":21,"nodeType":"197","messageId":"198","endLine":237,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":261,"column":21,"nodeType":"197","messageId":"198","endLine":261,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":23,"column":21,"nodeType":"197","messageId":"198","endLine":23,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":66,"column":21,"nodeType":"197","messageId":"198","endLine":66,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":109,"column":21,"nodeType":"197","messageId":"198","endLine":109,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":132,"column":21,"nodeType":"197","messageId":"198","endLine":132,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":166,"column":21,"nodeType":"197","messageId":"198","endLine":166,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":207,"column":21,"nodeType":"197","messageId":"198","endLine":207,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":237,"column":21,"nodeType":"197","messageId":"198","endLine":237,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":261,"column":21,"nodeType":"197","messageId":"198","endLine":261,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":16,"column":17,"nodeType":"197","messageId":"198","endLine":16,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":53,"column":17,"nodeType":"197","messageId":"198","endLine":53,"endColumn":25},{"ruleId":"199","severity":1,"message":"200","line":68,"column":17,"nodeType":"201","messageId":"202","endLine":68,"endColumn":23},{"ruleId":"195","severity":1,"message":"196","line":87,"column":17,"nodeType":"197","messageId":"198","endLine":87,"endColumn":25},{"ruleId":"203","severity":1,"message":"204","line":168,"column":8,"nodeType":"205","endLine":168,"endColumn":10,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":170,"column":5,"nodeType":"209","messageId":"210","endLine":177,"endColumn":6},{"ruleId":"195","severity":1,"message":"196","line":16,"column":17,"nodeType":"197","messageId":"198","endLine":16,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":52,"column":17,"nodeType":"197","messageId":"198","endLine":52,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":89,"column":17,"nodeType":"197","messageId":"198","endLine":89,"endColumn":25},{"ruleId":"199","severity":1,"message":"211","line":122,"column":10,"nodeType":"201","messageId":"202","endLine":122,"endColumn":28},{"ruleId":"199","severity":1,"message":"200","line":124,"column":9,"nodeType":"201","messageId":"202","endLine":124,"endColumn":15},{"ruleId":"195","severity":1,"message":"196","line":126,"column":17,"nodeType":"197","messageId":"198","endLine":126,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":163,"column":17,"nodeType":"197","messageId":"198","endLine":163,"endColumn":25},{"ruleId":"199","severity":1,"message":"212","line":191,"column":17,"nodeType":"201","messageId":"202","endLine":191,"endColumn":23},{"ruleId":"195","severity":1,"message":"196","line":206,"column":17,"nodeType":"197","messageId":"198","endLine":206,"endColumn":25},{"ruleId":"203","severity":1,"message":"204","line":326,"column":8,"nodeType":"205","endLine":326,"endColumn":10,"suggestions":"213"},{"ruleId":"199","severity":1,"message":"214","line":7,"column":9,"nodeType":"201","messageId":"202","endLine":7,"endColumn":10},{"ruleId":"203","severity":1,"message":"215","line":30,"column":8,"nodeType":"205","endLine":30,"endColumn":45,"suggestions":"216"},{"ruleId":"199","severity":1,"message":"217","line":4,"column":8,"nodeType":"201","messageId":"202","endLine":4,"endColumn":17},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'j'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'k'.","Function declared in a loop contains unsafe references to variable(s) 'l'.","Function declared in a loop contains unsafe references to variable(s) 'filtered', 'm'.","Function declared in a loop contains unsafe references to variable(s) 'filtered', 'n'.","Function declared in a loop contains unsafe references to variable(s) 'filtered', 'o'.","array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","no-unused-vars","'others' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["218"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'getAverageQuantity' is defined but never used.","'_value' is assigned a value but never used.",["219"],"'i' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'rowsPerPage'. Either include it or remove the dependency array.",["220"],"'Constants' is defined but never used.",{"desc":"221","fix":"222"},{"desc":"221","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [url]",{"range":"226","text":"227"},{"range":"228","text":"227"},"Update the dependencies array to be: [data, setTableRange, page, setSlice, rowsPerPage]",{"range":"229","text":"230"},[5608,5610],"[url]",[11692,11694],[892,929],"[data, setTableRange, page, setSlice, rowsPerPage]"]