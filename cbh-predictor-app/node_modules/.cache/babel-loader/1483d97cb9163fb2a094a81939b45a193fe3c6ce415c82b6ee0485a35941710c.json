{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// Calculates the number of pages\nconst calculateRange = (data, rowsPerPage) => {\n  const range = [];\n  const num = Math.ceil(data.length / rowsPerPage);\n  let i = 1;\n  for (let i = 1; i <= num; i++) {\n    range.push(i);\n  }\n  return range;\n};\n\n// Divides the data between all pages\nconst sliceData = (data, page, rowsPerPage) => {\n  return data.slice((page - 1) * rowsPerPage, page * rowsPerPage);\n};\n\n// Returns all Values and the spliced data\nconst useTable = (data, page, rowsPerPage) => {\n  _s();\n  const [tableRange, setTableRange] = useState([]);\n  const [slice, setSlice] = useState([]);\n  useEffect(() => {\n    const range = calculateRange(data, rowsPerPage);\n    setTableRange([...range]);\n    const slice = sliceData(data, page, rowsPerPage);\n    setSlice([...slice]);\n  }, [data, setTableRange, page, setSlice]);\n  return {\n    slice,\n    range: tableRange\n  };\n};\n_s(useTable, \"6WC9h+Gz2mUecmNIQPN7Q27vSx4=\");\nexport default useTable;","map":{"version":3,"names":["useState","useEffect","calculateRange","data","rowsPerPage","range","num","Math","ceil","length","i","push","sliceData","page","slice","useTable","tableRange","setTableRange","setSlice"],"sources":["C:/Users/lucas/Desktop/Personal/Studium/3.Semester/WW2/CBHPredictorTool/cbh-predictor/cbh-predictor-app/src/hooks/useTable.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\n// Calculates the number of pages\r\nconst calculateRange = (data, rowsPerPage) => {\r\n    const range = [];\r\n    const num = Math.ceil(data.length / rowsPerPage);\r\n    let i = 1;\r\n    for (let i = 1; i <= num; i++) {\r\n        range.push(i);\r\n    }\r\n    return range;\r\n};\r\n\r\n// Divides the data between all pages\r\nconst sliceData = (data, page, rowsPerPage) => {\r\n    return data.slice((page - 1) * rowsPerPage, page * rowsPerPage);\r\n};\r\n\r\n// Returns all Values and the spliced data\r\nconst useTable = (data, page, rowsPerPage) => {\r\n    const [tableRange, setTableRange] = useState([]);\r\n    const [slice, setSlice] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      const range = calculateRange(data, rowsPerPage);\r\n      setTableRange([...range]);\r\n  \r\n      const slice = sliceData(data, page, rowsPerPage);\r\n      setSlice([...slice]);\r\n    }, [data, setTableRange, page, setSlice]);\r\n  \r\n    return { slice, range: tableRange };\r\n};\r\n  \r\nexport default useTable;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,MAAMC,cAAc,GAAG,CAACC,IAAI,EAAEC,WAAW,KAAK;EAC1C,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACL,IAAI,CAACM,MAAM,GAAGL,WAAW,CAAC;EAChD,IAAIM,CAAC,GAAG,CAAC;EACT,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,GAAG,EAAEI,CAAC,EAAE,EAAE;IAC3BL,KAAK,CAACM,IAAI,CAACD,CAAC,CAAC;EACjB;EACA,OAAOL,KAAK;AAChB,CAAC;;AAED;AACA,MAAMO,SAAS,GAAG,CAACT,IAAI,EAAEU,IAAI,EAAET,WAAW,KAAK;EAC3C,OAAOD,IAAI,CAACW,KAAK,CAAC,CAACD,IAAI,GAAG,CAAC,IAAIT,WAAW,EAAES,IAAI,GAAGT,WAAW,CAAC;AACnE,CAAC;;AAED;AACA,MAAMW,QAAQ,GAAG,CAACZ,IAAI,EAAEU,IAAI,EAAET,WAAW,KAAK;EAAA;EAC1C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,KAAK,EAAEI,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMI,KAAK,GAAGH,cAAc,CAACC,IAAI,EAAEC,WAAW,CAAC;IAC/Ca,aAAa,CAAC,CAAC,GAAGZ,KAAK,CAAC,CAAC;IAEzB,MAAMS,KAAK,GAAGF,SAAS,CAACT,IAAI,EAAEU,IAAI,EAAET,WAAW,CAAC;IAChDc,QAAQ,CAAC,CAAC,GAAGJ,KAAK,CAAC,CAAC;EACtB,CAAC,EAAE,CAACX,IAAI,EAAEc,aAAa,EAAEJ,IAAI,EAAEK,QAAQ,CAAC,CAAC;EAEzC,OAAO;IAAEJ,KAAK;IAAET,KAAK,EAAEW;EAAW,CAAC;AACvC,CAAC;AAAC,GAbID,QAAQ;AAed,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}